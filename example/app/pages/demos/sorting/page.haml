:ruby
  Heading = import("/components/Layout/Heading")
  Highlight = import("/components/UI/Highlight")
  Card = import("/components/UI/Card")
  Details = import("/components/UI/Details")
  Button = import("/components/Form/Button")
  Fieldset = import("/components/Form/Fieldset")

  Item = Data.define(:id, :color) do
    def self.create
      new(
        id: Nanoid.generate(size: 10),
        color: rand * 360
      )
    end
  end

  def self.get_initial_state(**) = {
    items: Array.new(5) { Item.create }
  }

  def handle_add
    update do |state|
      { items: [*state[:items], *Array.new(5) { Item.create }] }
    end
  end

  def handle_remove
    update do |state|
      { items: state[:items].reject { rand(3).zero? } }
    end
  end

  def handle_shuffle
    update do |state|
      { items: state[:items].shuffle }
    end
  end

  def handle_shuffle_slices
    update do |state|
      { items: state[:items].each_slice(5).to_a.shuffle.flatten }
    end
  end

  def handle_sort
    update do |state|
      { items: state[:items].sort_by(&:id) }
    end
  end

  def handle_sort_by_color
    update do |state|
      { items: state[:items].sort_by(&:color) }
    end
  end

%article
  %Heading(level=2)
    Sorting
    %span< (#{state[:items].size} items)
  .flex
    %Button(onclick=handle_add) Add items
    %Button(onclick=handle_remove) Remove items
    %Button(onclick=handle_shuffle) Shuffle items
    %Button(onclick=handle_shuffle_slices) Shuffle slices
    %Button(onclick=handle_sort) Sort
    %Button(onclick=handle_sort_by_color) Sort by color
  .flex
    %pre= state[:items].map(&:id).join("\n")
    %ul
      = state[:items].map do |item|
        %li[item.id]{style: { __color: item.color }}
          #{item.id} (#{item.color.to_i})
:css
  .flex {
    display: flex;
    gap: .25em;
    flex-wrap: wrap;
  }

  pre {
    line-height: 2em;
  }

  ul {
    list-style-type: none;
    padding: 0;
    flex: 1 1 5em;
    gap: 1px;
    font-family: monospace;
    line-height: 2em;
    border-radius: 3px;
    overflow: hidden;
    box-shadow: rgb(0 0 0 / 24%) 0px 3px 8px;
  }

  li {
    margin: 0;
    padding: 0 .5em;
    background: hsl(var(--color), 50%, 70%);
    background-image: linear-gradient(0.5turn, #0006 0%, #0003 25%, #0000 100%);
    color: #000;
    font-size: 1em;
    line-height: 2em;
  }
