:ruby
  Heading = import("/app/components/Layout/Heading")
  Fieldset = import("/app/components/Form/Fieldset")
  Input = import("/app/components/Form/Input")
  Button = import("/app/components/Form/Button")
  Link = import("/app/components/UI/Link")
  GameGrid = import("./GameGrid")

  # b = born
  # s = survive
  RULES = { b: 3..3, s: 2..3 }
  # RULES = { b: 2..2, s: -1..-1 }
  # RULES = { b: 3..3, s: 2..5 }
  # RULES = { b: 3..4, s: 3..5 }

  MIN_SIZE = 5
  MAX_SIZE = 20
  DEFAULT_SIZE = MAX_SIZE

  MIN_FPS = 1
  MAX_FPS = 10
  DEFAULT_FPS = 4

  def self.init_grid(width, height, &block)
    Array.new(height) do |y|
      Array.new(width) do |x|
        if block_given?
          yield x, y
        else
          false
        end
      end
    end
  end

  def self.get_initial_state(initial_size: DEFAULT_SIZE, **) = {
    width: initial_size,
    height: initial_size,
    grid: init_grid(initial_size, initial_size),
    running: false,
    fps: DEFAULT_FPS,
  }

  def mount
    loop do
      if @running
        handle_step
        sleep 1.0 / @fps
      else
        sleep 0.5
      end
    end
  end

  def get_position(event)
    event => { target: { value: } }
    value.split.map(&:to_i) => [x, y]
    [x, y]
  end

  def handle_draw(event)
    x, y = get_position(event)

    case event
    in { buttons: 0 }
      # noop. It would be nice if these events were filtered in the client.
    in { buttons: 1 }
      set_cell_value(x, y, true)
    in { buttons: 2 }
      set_cell_value(x, y, false)
    end
  end

  def handle_reset
    update do |width:, height:|
      { grid: self.class.init_grid(width, height) }
    end
  end

  def handle_randomize(event)
    update do |width:, height:|
      { grid: self.class.init_grid(width, height) { rand(2).zero? } }
    end
  end

  def set_cell_value(x, y, value)
    update do |state|
      {
        grid: @grid.dup.tap do |grid|
          grid[y] = grid[y].dup.tap { |row| row[x] = value }
        end
      }
    end
  end

  def handle_change_fps(e)
    e => { target: { value: } }
    update(fps: value.to_i.clamp(MIN_FPS, MAX_FPS))
  end

  def handle_change_width(e)
    e => { target: { value: } }
    width = value.to_i.clamp(MIN_SIZE, MAX_SIZE)
    update do |grid:|
      { grid:
        grid.map { |row| row.slice(0...width).fill(false, (row.size)...width) }
      }
    end
    handle_reset
  end

  def handle_change_height(e)
    e => { target: { value: } }
    height = value.to_i.clamp(MIN_SIZE, MAX_SIZE)
    update do |grid:, width:|
      { grid:
        if grid.size > height
          grid.slice(0..height)
        else
          grid + this.class.init_grid(width, height - grid.size)
        end
      }
    end
    handle_reset
  end

  def handle_change_size(e)
    e => { target: { value: } }
    size = value.to_i.clamp(MIN_SIZE, MAX_SIZE)
    update(width: size, height: size)
    handle_reset
  end

  def handle_step
    update do |grid:|
      { grid: step_grid(grid) }
    end
  end

  def handle_toggle_running
    update do |running:|
      { running: !running }
    end
  end

  private

  def step_grid(grid)
    grid.map.with_index do |row, y|
      row.map.with_index do |alive, x|
        RULES[alive ? :s : :b].include?(count_neighbors(grid, x, y))
      end
    end
  end

  def count_neighbors(grid, x, y)
    each_neighbor(grid, x, y).count { _1[:value] }
  end

  def each_neighbor(grid, x, y)
    Enumerator.new do |enum|
      -1.upto(1) do |yoff|
        row = grid[(y + yoff) % grid.size]

        -1.upto(1) do |xoff|
          next if yoff.zero? && xoff.zero?
          value = row[(x + xoff) % row.size]
          enum.yield(x:, y:, value:)
        end
      end
    end
  end

:css
  .buttons {
    display: flex;
    gap: 1em;
  }

%article
  %Heading(level=2) Game of life

  %p
    This is an implementation of
    %Link(href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank")< Conway's Game of Life
    \.
  %p Use the primary mouse button to draw and the secondary mouse button to erase.

  %Fieldset
    %legend Controls
    .buttons
      %Button(onclick=handle_reset) Reset
      %Button(onclick=handle_randomize) Randomize
      %Button(onclick=handle_step disabled=running) Step
      %Button(onclick=handle_toggle_running){
        color: @running ? "var(--red)" : "var(--green)"
      }= @running ? "Stop" : "Start"
    -#
      %div
        %label(for="grid-width") Grid width
        %br
        %input(id="grid-width" type="range" min=MIN_SIZE max=MAX_SIZE step=1 oninput=handle_change_width){value: @width}
        %output= @width
      %div
        %label(for="grid-height") Grid height
        %br
        %input(id="grid-height" type="range" min=MIN_SIZE max=MAX_SIZE step=1 oninput=handle_change_height){value: @height}
        %output= @height
      %div
        %label(for="game-fps") Frames per second
        %br
        %input(id="game-fps" type="range" min=MIN_FPS max=MAX_FPS step=1 oninput=handle_change_fps){value: @fps}
        %output= @fps
  %GameGrid(grid=@grid ondraw=handle_draw)
