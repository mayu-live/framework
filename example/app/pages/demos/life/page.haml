:ruby
  translations("en-US", "sv-SE")

  Heading = import("/app/components/Layout/Heading")
  Fieldset = import("/app/components/Form/Fieldset")
  Input = import("/app/components/Form/Input")
  Button = import("/app/components/Form/Button")
  Icon = import("/app/components/UI/Icon")
  GameGrid = import("./GameGrid")

  MAX_SIZE = 20

  def self.get_initial_state(initial_size: MAX_SIZE, **) = {
    size: initial_size,
    grid: Array.new(initial_size * initial_size, false),
    running: false,
  }

  def mount
    loop do
      if state[:running]
        handle_step
        sleep 0.25
      else
        sleep 0.5
      end
    end
  end

  def handle_mouseenter(event)
    if event in { buttons: 1 }
      handle_toggle(event)
    end
  end

  def handle_reset(event)
    update do |size:|
      { grid: Array.new(size * size, false) }
    end
  end

  def handle_randomize(event)
    update do |size:|
      { grid: Array.new(size * size) { rand(2).zero? } }
    end
  end

  def handle_toggle(event)
    event => { target: { value: } }
    index = value.to_i

    update do |state|
      grid = state[:grid].dup
      grid[index] = !grid[index]
      { grid: }
    end
  end

  def handle_change_size(e)
    e => { target: { value: } }
    update_size(value.to_i)
  end

  def handle_step(*)
    update do |grid:, size:|
      { grid: step_grid(grid, size) }
    end
  end

  def handle_toggle_running(e)
    update do |running:|
      { running: !running }
    end
  end

  private

  def step_grid(grid, size)
    grid.map.with_index do |alive, i|
      y, x = i.divmod(size)
      neighbor_count = count_neighbors(grid, size, x, y)

      if alive
        neighbor_count == 2 || neighbor_count == 3
      else
        neighbor_count == 3
      end
    end
  end

  def count_neighbors(grid, size, x, y)
    count = 0

    -1.upto(1) do |yoff|
      -1.upto(1) do |xoff|
        next if yoff.zero? && xoff.zero?
        count += 1 if get_value(grid, size, x + xoff, y + yoff)
      end
    end

    count
  end

  def get_value(grid, size, x, y)
    grid[get_index(size, x, y)]
  end

  def get_index(size, x, y)
    (y % size) * size + x % size
  end

:css
  .buttons {
    display: flex;
    gap: 1em;
  }

  .grid {
    user-select: none;
    display: grid;
    margin: 1em;
    background: #000;
    grid-template-columns: repeat(var(--grid-size), minmax(0, 1fr));
    grid-auto-flow: row;
    border: 1px solid #000;
    border-left: none;
    border-top: none;
  }

  .cell {
    border: 0;
    aspect-ratio: 1;
    border: 1px solid #000;
    border-bottom: none;
    border-right: none;
  }

  .cell { background: #fff; }
  .cell:hover { background: #f0f0f0; }
  .alive { background: #333; }
  .alive:hover { background: #666; }

  .button {
    display: flex;
    align-items: center;
    gap: .5em;
  }

:ruby
  state => grid:, size:, running:

%article(lang=lang)
  %Heading(level=2)= t(:title)

  %Fieldset
    %legend= t(:controls)
    .buttons
      %Button.button(onclick=handle_reset)
        %Icon(name="arrows-rotate")
        = t(:reset)
      %Button.button(onclick=handle_randomize)
        %Icon(name="dice")
        = t(:randomize)
      %Button.button(onclick=handle_step disabled=running)
        %Icon(name="forward-step")
        = t(:step)
      = if running
        %Button.button(onclick=handle_toggle_running color="var(--red)")
          %Icon(name="pause")
          = t(:stop)
      = unless running
        %Button.button(onclick=handle_toggle_running color="var(--green)")
          %Icon(name="play")
          = t(:start)
  %GameGrid(grid=grid size=size onmousedown=handle_toggle onmouseenter=handle_mouseenter)
