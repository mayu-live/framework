:ruby
  translations("en-US", "sv-SE")

  Card = import("/app/components/Layout/Card")
  Link = import("/app/components/UI/Link")

  def self.get_initial_state(**) = {
    items: [],
    editing: nil,
    filter: "all",
    form_key: "form-0",
  }

  def handle_submit(e)
    e => { target: { formData: { new_todo: String => description } } }

    update do |items:, form_key:|
      {
        items: [
          { id: Nanoid.generate(), description: },
          *items,
        ],
        form_key: form_key.succ,
        editing: nil,
      }
    end
  end

  def handle_set_filter(e)
    e => { target: { name: } }
    update(filter: name, editing: nil)
  end

  def handle_dblclick(e)
    e => { currentTarget: { id: } }
    update(editing: id)
  end

  def handle_update(e)
    e => { currentTarget: { id:, formData: { description: } } }

    update do |items:|
      {
        editing: nil,
        items: items.map { |item|
          if item[:id] == id
            { **item, description:}
          else
            item
          end
        }
      }
    end
  end

  def handle_check(e)
    e => { currentTarget: { name: id, checked: completed } }

    update do |items:|
      {
        editing: nil,
        items: items.map { |item|
          if item[:id] == id
            { **item, completed: }
          else
            item
          end
        }
      }
    end
  end

  def handle_delete(e)
    e => { currentTarget: { name: id } }

    update do |items:|
      {
        editing: nil,
        items: items.reject { |item| item[:id] == id }
      }
    end
  end

  def handle_toggle_all(e)
    e => { target: { checked: completed } }

    update do |items:|
      {
        editing: nil,
        items: items.map do |item|
          { **item, completed: }
        end
      }
    end
  end

  def handle_clear_completed(e)
    update do |items:|
      {
        editing: nil,
        items: items.reject { _1[:completed] }
      }
    end
  end

  private

  def get_filtered_items(filter = state[:filter])
    case filter
    in "all"
      state[:items]
    in "active"
      state[:items].select { !_1[:completed] }
    in "completed"
      state[:items].select { _1[:completed] }
    end
  end

  def pluralize(count, singular, plural)
    if count == 1
      singular
    else
      plural
    end
  end

  def toggle_checkbox_state
    completed_count = state[:items].count { _1[:completed] }
    remaining_count = state[:items].count { !_1[:completed] }

    if completed_count == 0
      { checked: false, indeterminate: false }
    else
      if remaining_count == 0
        { checked: true, indeterminate: false }
      else
        { checked: false, indeterminate: true }
      end
    end
  end

:css
  .header {
    border-bottom: 1px solid #0003;
    padding: 1em;
  }

  .title {
    font-size: 1.5em;
    font-weight: 100;
    margin: 0;
  }

  .footer {
    padding: 1em;
    background: #fefefe;
    box-shadow: inset 0 0 15px -10px #000;
  }

  .footer-grid {
    font-size: .8em;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    align-items: center;
  }

  .list {
    padding: 0;
    margin: 0;
  }

  .item {
    padding: 1em;
    margin: 0;
    display: block;
    background: linear-gradient(0turn, #0001 0%, #0000 100%);
    border-bottom: 1px solid #0003;
  }

  .delete-button {
    opacity: 0;
    border: 0;
    background: transparent;
    aspect-ratio: 1;
    display: block;
    transition: opacity 200ms;
    cursor: pointer;
    position: relative;
  }

  .delete-button::after {
    content: "Ã—";
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(2.0);
  }

  .item:hover .delete-button,
  .item:focus-within .delete-button {
    opacity: 1;
  }

  .row {
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
    gap: .5em;
  }

  .form {
    composes: row;
  }

  .edit {
    composes: row;
    padding-left: 3em;
  }

  .description {
    margin: 0;
    flex: 1;
  }

  .checkbox {
    width: 2em;
    aspect-ratio: 1;
  }

  .toggle-all {
    composes: checkbox;
  }

  .completed {
    text-decoration: line-through;
    opacity: .5;
  }

  .input {
    display: block;
    flex: 1;
    height: 2em;
  }

  .filter {
    display: flex;
    gap: .5em;
    justify-content: space-around;
  }

  .footer-button {
    border: 0;
    background: transparent;
    padding: 0;
    margin: 0;
    cursor: pointer;
    transition: opacity 200ms;
    border-radius: 3px;
    padding: 0.25em 1em;
  }

  .footer-button[aria-current="true"] {
    font-weight: bold;
  }

  .footer-button:hover {
    text-decoration: underline;
  }

  .footer-button:active {
    opacity: .5;
  }

  .filter-button {
    composes: footer-button;
  }

  .clear-button {
    composes: footer-button;
    color: var(--red);
  }

  .clear-completed {
    text-align: right;
  }

%Card
  .header
    %h1.title Todo App
    %p
      This is an implementation of the classic
      %Link(href="https://todomvc.com/" target="_blank")< TodoMVC app
      \.
    %form.form(onsubmit=handle_submit){key: state[:form_key]}
      %input.toggle-all(type="checkbox" onchange=handle_toggle_all){**toggle_checkbox_state}
      %input.input(required autofocus name="new_todo" value=""){
        placeholder: t(:what_needs_to_be_done)
      }
  .main
    %ul.list
      = get_filtered_items.map do |item|
        %li.item{key: item[:id]}
          = if state[:editing] == item[:id]
            %form.edit(onsubmit=handle_update){id: item[:id]}
              %input.input(type="text" name="description" autofocus onfocus="event.target.select()" required){
                initial_value: item[:description]
              }
          = unless state[:editing] == item[:id]
            .row
              %input.checkbox(type="checkbox" onchange=handle_check){
                name: item[:id],
                checked: item[:completed],
              }
              %p.description(ondblclick=handle_dblclick){
                id: item[:id],
                class: { completed: item[:completed] },
              }= item[:description]
              %button.delete-button(onclick=handle_delete){name: item[:id]}
  .footer
    .footer-grid
      .items-left
        - count = get_filtered_items("active").size
        = t(:item, pluralize(count, :one, :many), count:)
      .filter
        = %w[all active completed].map do |name|
          %button.filter-button(onclick=handle_set_filter name=name title="Show #{name} items"){
            aria: { current: (state[:filter] == name).to_s }
          }= t(:filter, name.to_sym)
      .clear-completed
        - completed = get_filtered_items("completed")
        = if completed.length.nonzero?
          %button.clear-button(onclick=handle_clear_completed)= t(:clear_completed)
