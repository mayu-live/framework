:ruby
  Heading = import("/components/Layout/Heading")
  Card = import("/components/UI/Card")
  Link = import("/components/UI/Link")

  def initialize
    @items = []
    @editing = nil
    @filter = "all"
    @form_key = "form-0"
  end

  def handle_submit(e)
    e => { target: { formData: { new_todo: String => description } } }

    @items = [
      { id: SecureRandom.alphanumeric(10), description: },
      *@items
    ]

    @form_key = @form_key.succ
    @editing = nil
  end

  def handle_set_filter(e)
    e => { target: { name: } }
    @filter = name
    @editing = nil
  end

  def handle_dblclick(e)
    e => { currentTarget: { id: } }
    @editing = id
  end

  def handle_update(e)
    e => { currentTarget: { id:, formData: { description: } } }

    @editing = nil
    @items = @items.map do |item|
      if item[:id] == id
        { **item, description: }
      else
        item
      end
    end
  end

  def handle_check(e)
    e => { currentTarget: { name: id, checked: completed } }

    @editing = nil
    @items = @items.map do |item|
      if item[:id] == id
        { **item, completed: }
      else
        item
      end
    end
  end

  def handle_delete(e)
    e => { currentTarget: { name: id } }

    @items = @items.reject { |item| item[:id] == id }
  end

  def handle_toggle_all(e)
    e => { target: { checked: completed } }
    pp e

    @items = @items.map do |item|
      { **item, completed: }
    end

    @editing = nil
  end

  def handle_clear_completed
    @editing = nil,
    @items = @items.reject { _1[:completed] }
  end

  private

  def get_filtered_items(filter = @filter)
    case filter
    in "all"
      @items
    in "active"
      @items.select { !_1[:completed] }
    in "completed"
      @items.select { _1[:completed] }
    end
  end

  def pluralize(count, singular, plural)
    format(
      "%d %s",
      count,
      if count == 1
        singular
      else
        plural
      end
    )
  end

  def toggle_checkbox_state
    completed_count = @items.count { _1[:completed] }
    remaining_count = @items.count { !_1[:completed] }

    if completed_count == 0
      { checked: false, indeterminate: false }
    else
      if remaining_count == 0
        { checked: true, indeterminate: false }
      else
        { checked: false, indeterminate: true }
      end
    end
  end

%article
  %Heading(level=2) Todo App
  %p
    This is an implementation of the classic
    %Link(href="https://todomvc.com/" target="_blank")< TodoMVC app
    \.
  %Card
    .header
      %form.form(onsubmit=handle_submit autocomplete="off")[@form_key]
        %input.toggle-all(type="checkbox" onchange=handle_toggle_all){**toggle_checkbox_state}
        %input.input(required autofocus name="new_todo" placeholder="What needs to be done?" value="")
    .main
      %ul
        = get_filtered_items.map do |item|
          %li[item[:id]]
            = if @editing == item[:id]
              %form.edit(onsubmit=handle_update autocomplete="off"){id: item[:id]}
                %input.input(type="text" name="description" autofocus onfocus="event.target.select()" required){
                  initial_value: item[:description]
                }
            = else
              .row
                %input.checkbox(type="checkbox" onchange=handle_check){
                  name: item[:id],
                  checked: item[:completed],
                }
                %p.description(ondblclick=handle_dblclick){
                  id: item[:id],
                  class: { completed: item[:completed] },
                }= item[:description]
                %button.delete-button(onclick=handle_delete){name: item[:id]}
    .footer
      .footer-grid
        .items-left #{pluralize(get_filtered_items("active").size, "item", "items")} left
        .filter
          = %w[all active completed].map do |name|
            %button.filter-button(onclick=handle_set_filter name=name title="Show #{name} items"){
              aria: { current: (@filter == name).to_s }
            }= name.capitalize
        .clear-completed
          - completed = get_filtered_items("completed")
          = if completed.length.nonzero?
            %button.clear-button(onclick=handle_clear_completed) Clear completed

:css
  .header {
    border-bottom: 1px solid #0003;
    padding: 1em;
  }

  .title {
    font-size: 1.5em;
    font-weight: 100;
    margin: 0;
  }

  .footer {
    padding: 1em;
    background: #fefefe;
    box-shadow: inset 0 0 15px -10px #000;
  }

  .footer-grid {
    font-size: .8em;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    align-items: center;
  }

  ul {
    padding: 0;
    margin: 0;
  }

  li {
    padding: 1em;
    margin: 0;
    display: block;
    background: linear-gradient(0turn, #0001 0%, #0000 100%);
    border-bottom: 1px solid #0003;
  }

  .delete-button {
    opacity: 0;
    border: 0;
    background: transparent;
    aspect-ratio: 1;
    display: block;
    transition: opacity 200ms;
    cursor: pointer;
    position: relative;
  }

  .delete-button::after {
    content: "Ã—";
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(2.0);
  }

  li:hover .delete-button,
  li:focus-within .delete-button {
    opacity: 1;
  }

  .row {
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
    gap: .5em;
  }

  .form {
    composes: row;
  }

  .edit {
    composes: row;
    padding-left: 3em;
  }

  .description {
    margin: 0;
    flex: 1;
  }

  .checkbox {
    width: 2em;
    aspect-ratio: 1;
  }

  .toggle-all {
    composes: checkbox;
  }

  .completed {
    text-decoration: line-through;
    opacity: .5;
  }

  .input {
    display: block;
    flex: 1;
    height: 2em;
  }

  .filter {
    display: flex;
    gap: .5em;
    justify-content: space-around;
  }

  .footer-button {
    border: 0;
    background: transparent;
    padding: 0;
    margin: 0;
    cursor: pointer;
    transition: opacity 200ms;
    border-radius: 3px;
    padding: 0.25em 1em;
  }

  .footer-button[aria-current="true"] {
    font-weight: bold;
  }

  .footer-button:hover {
    text-decoration: underline;
  }

  .footer-button:active {
    opacity: .5;
  }

  .filter-button {
    composes: footer-button;
  }

  .clear-button {
    composes: footer-button;
    color: var(--red);
  }

  .clear-completed {
    text-align: right;
  }
