:ruby
  require "fuzzy_match"

  Fieldset = import("/components/Form/Fieldset")
  Input = import("/components/Form/Input")
  Button = import("/components/Form/Button")
  Icon = import("/components/UI/Icon")

  def initialize
    @open = false
    @value = ""
    @suggestions = []
    @fuzzymatch = FuzzyMatch.new($results, read: :name)
  end

  def handle_open =
    @open = true

  def handle_close =
    @open = false

  def handle_change(e)
    e => { target: { value: } }

    @value = value
    @suggestions = @fuzzymatch.find_all(value).first(10)
  end

%div
  %Button(onclick=handle_open)
    %Icon(name="filter")>
    Filter
  %dialog(onclose=handle_close open=@open)
    %form(method="dialog")
      %Fieldset
        %legend Filter
        %Input(label="Name" oninput=handle_change onchange=handle_change autocomplete="off")
        %Button Close
        .results
          %ul
            = @suggestions.map do |result|
              - id = result[:url].split("/").last.to_i
              %li
                %a(href="/demos/pokemon/#{id}")
                  = result[:name]

:css
  .results {
    position: relative;
  }

  ul {
    background: var(--green-bright);
    border: 1px solid var(--green);
    margin: 0;
    padding: 0;
    list-style-type: none;
    min-width: 20em;
  }

  ul:empty { display: none; }

  li {
    margin: 0;
    padding: 0;
  }

  a:link, a:visited {
    display: block;
    text-decoration: none;
    padding: .5em 1em;
  }

  a:active, a:hover {
    background: var(--blue-bright);
  }

  dialog {
    border: 1px solid #f0f;
  }

  dialog::backdrop {
    backdrop-filter: brightness(50%) blur(5px);
  }
