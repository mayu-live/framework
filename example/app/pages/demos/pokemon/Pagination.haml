:ruby
  Fieldset = import("/app/components/Form/Fieldset")
  Button = import("/app/components/Form/Button")

  translations("en-US", "sv-SE")

  def pagination_window(current_page:, total_pages:, window_size: 5)
    half_window_size = (window_size - 1) / 2
    first = current_page - half_window_size.ceil
    last = current_page + half_window_size.floor

    case
    when first < 1
      1..[total_pages, window_size].min
    when last >= total_pages
      [total_pages + first - last, 1].max..total_pages
    else
      first..last
    end
  end

:ruby
  props => {
    page:,
    per_page:,
    total_pages:,
  }

  prev_page_link = page > 1 && "?page=#{page.pred}"
  next_page_link = page <= props[:total_pages] && "?page=#{page.succ}"

  pages =
    pagination_window(
      current_page: page,
      total_pages: props[:total_pages].succ,
      window_size: props[:window_size] || 5,
    )

%Fieldset(lang=lang)
  %legend
    = t(:legend, page:, total_pages: total_pages.succ, per_page:)

  .wrap
    %nav.buttons(aria-label="pagination")
      %a.button(href=prev_page_link rel="prev")
        = t(:previous_page)

      %ul.pages
        = pages.map do |num|
          %li(key=num)
            %a.page{
              href: "?page=#{num}",
              aria: { current: page == num && "page" }
            }= num

      %a.button(href=next_page_link rel="prev")
        = t(:next_page)

    .perPage
      = t(:per_page_label)
      %select(value=per_page){on_change: props[:on_change_per_page]}<
        = [20, 40, 80].map do |num|
          %option(key=num value=num)= num
