:ruby
  Pagination = import("./Pagination")

  translations("en-US", "sv-SE")

  def self.get_initial_state(**props) = {
    result: nil,
    error: nil,
    page: props.dig(:request, :query, :page).to_i,
    per_page: props.dig(:per_page).to_i.nonzero? || 20,
  }

  def mount
    sleep 1

    res = helpers.fetch("https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0")
    result = res.json(symbolize_names: true)
    update(result:)
  rescue => e
    update(error: e.message)
  end

  def handle_set_per_page(e)
    e => { target: { value: } }
    update(page: 0, per_page: value.to_i)
  end

:css
  .list {
    list-style-type: none;
  }

  .item {
    list-style-type: none;
    margin: 0.5em 0;
  }

:ruby
  state => result:, error:

- return if error
  %p= t(:error, error:)

- return unless result
  %p
    = t(:loading_pokemon_from)
    %a(href="https://pokeapi.co/")< PokÃ©API

:ruby
  result => results:

  per_page = state[:per_page]
  total_pages = (results.length / per_page).floor
  page = props.dig(:request, :query, :page).to_i.clamp(1, total_pages.succ)
  results_on_this_page = results.slice(page.pred * per_page, per_page) || []

%article
  %Pagination{
    page:,
    per_page:,
    total_pages:,
    on_click_prev: handler(:handle_prev_page),
    on_click_next: handler(:handle_next_page),
    on_change_per_page: handler(:handle_set_per_page),
  }

  %ul.list
    = results_on_this_page.map do |result|
      - id = result[:url][/\/(\d+)\/$/, 1].to_i

      %li{key: result[:url], class: styles.item}
        = "#{id}. "
        %a(href="/demos/pokemon/#{id}")
          = result[:name].capitalize

  %Pagination{
    page:,
    per_page:,
    total_pages:,
    on_click_prev: handler(:handle_prev_page),
    on_click_next: handler(:handle_next_page),
    on_change_per_page: handler(:handle_set_per_page),
  }
