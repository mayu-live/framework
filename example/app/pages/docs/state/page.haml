:ruby
  Heading = import("/app/components/Layout/Heading")
  Card = import("/app/components/UI/Card")
  Highlight = import("/app/components/UI/Highlight")
  Markdown = import("../Markdown")
  Example = import("./Example")

:css
  .card {
    margin: 1em;
    margin-top: 2em;
    padding: 1em;
  }

%article
  %Markdown
    :plain
      # State

      Set up state with `self.get_initial_state`,
      read state with `state`,
      and update state with `update`,

  %Highlight(language="haml")
    = File.read("app/pages/docs/state/Example.haml")

  %p This will result in the following component:

  %Card.card
    %Example

  %Markdown
    :plain
      # Different ways to update

      If you don't need to read state when updating, you can do this:

      ```ruby
      update(count: 0) # old syntax
      @count = 0 # new syntax
      ```

      If you need to read state, you can get the entire state object:

      ```ruby
      # old syntax
      update do |state|
        { count: state[:count] + 1 }
      end
      # new syntax
      @count += 1
      ```

      Or you could extract just the keys you are interested in:

      ```ruby
      update do |count:|
        { count: count + 1 }
      end
      ```

      You can also use default values:

      ```ruby
      # old syntax
      update do |count: 0|
        { count: count + 1 }
      end
      # new syntax
      @count = (@count || 0) + 1
      ```
