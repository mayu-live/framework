Pagination = require("./Pagination")

def self.get_initial_state(**props)
  {
    result: nil,
    error: nil,
    page: props.dig(:query, :page).to_i,
    per_page: props.dig(:per_page).to_i.nonzero? || 20,
  }
end

def mount
  sleep 1

  res = helpers.fetch("https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0")
  result = res.json(symbolize_names: true)
  update(result:)
rescue => e
  update(error: e.message)
end

def handle_set_per_page(e)
  update(page: 0, per_page: e["value"].to_i)
end

def render
  state => result:

  return (
    <div>
      <p>Loading Pokémon from <a href="https://pokeapi.co/">PokéAPI</a></p>
    </div>
  ) unless result

  result => results:

  per_page = state[:per_page]
  total_pages = (results.length / per_page).floor
  page = props.dig(:query, :page).to_i.clamp(1, total_pages.succ)
  results_on_this_page = results.slice(page.pred * per_page, per_page) || []

  <div>
    <Pagination
      page={page}
      per-page={per_page}
      total-pages={total_pages}
      on-click-prev={handler(:handle_prev_page)}
      on-click-next={handler(:handle_next_page)}
      on-change-per-page={handler(:handle_set_per_page)}
    />

    <ul>
      {results_on_this_page.map do |result|
        <li key={result[:url]}>
          <a href={"/pokemon/#{result[:url][/\/(\d+)\/$/, 1].to_i}"}>
            {result[:name].capitalize}
          </a>
        </li>
      end}
    </ul>

    <Pagination
      page={page}
      per-page={per_page}
      total-pages={total_pages}
      on-click-prev={handler(:handle_prev_page)}
      on-click-next={handler(:handle_next_page)}
      on-change-per-page={handler(:handle_set_per_page)}
    />
  </div>
end
