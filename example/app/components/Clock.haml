:ruby
  def self.get_initial_state(**)
    time = Time.now.utc + 0.5
    { hour: time.hour, min: time.min, sec: time.sec }
  end

  def mount
    loop do
      update(self.class.get_initial_state)
      sleep 0.5
    end
  end

  def calculate_pos(value, length)
    offset = 45
    [
      Math.cos((value + offset) / 60.0 * Math::PI * 2),
      Math.sin((value + offset) / 60.0 * Math::PI * 2),
    ].map { _1 * length }.map { _1.round(5) }
  end

:css
  .svg {
    width: 100%;
    height: auto;
  }

  .hand {
    transition: transform 250ms ease-in-out;
  }

:ruby
  stroke = $stroke || "var(--stroke, #000)"
  fill = $fill || "var(--fill, transparent)"

%div(class=$class)
  %svg.svg(width="100" height="100" viewBox="-100 -100 200 200" xmlns="http://www.w3.org/2000/svg")
    %circle(cx=0 cy=0 r=99 fill=fill stroke=stroke stroke-width="2")
    %g
      - x1, y1, x2 = [0, 0, 0]
      - y2 = -50
      - style = { transform: format("rotateZ(%.5fturn)", state[:hour] / 12.0) }
      %line.hand(x1=x1 y1=y1 x2=x2 y2=y2 stroke=stroke stroke-width="6"){style:}
      - y2 = -60
      - style = { transform: format("rotateZ(%.5fturn)", state[:hour] + state[:min] / 60.0) }
      %line.hand(x1=x1 y1=y1 x2=x2 y2=y2 stroke=stroke stroke-width="3"){style:}
      - y2 = -80
      - style = { transform: format("rotateZ(%.5fturn)", state[:hour] * 60.0 + state[:min] + state[:sec] / 60.0) }
      %line.hand(x1=x1 y1=y1 x2=x2 y2=y2 stroke=stroke stroke-width="1"){style:}
    %circle(cx=0 cy=0 r=3 fill=stroke)
    %g
      = 12.times.map do |i|
        - x1, y1 = calculate_pos(i * 5, 60.0)
        - x2, y2 = calculate_pos(i * 5, 80.0)
        %line(x1=x1 y1=y1 x2=x2 y2=y2 stroke=stroke stroke-width=2)
