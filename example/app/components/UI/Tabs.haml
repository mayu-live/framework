:ruby
  def self.get_initial_state(children:, **)
    active = children.slots.keys.first
    { active:, enabled: [active] }
  end

  def handle_change(e)
    e => { target: { value: }}

    update do |state|
      {
        active: value,
        enabled: [*state[:enabled], value].uniq
      }
    end
  end

  def handle_enable(e)
    e => { target: { value: }}

    update do |state|
      { enabled: [*state[:enabled], value].uniq }
    end
  end

  private

  def id(*args)
    [:id, *args, vnode_id].flatten.join("-")
  end

:ruby
  state => active:, enabled:
  names = children.slots.keys

.tabs
  .tablist(role="tablist")
    = names.map.with_index do |name, i|
      - handle_enable = enabled.include?(name) ? nil : handler(:handle_enable)
      %button[name](value=name onclick=handle_change role="tab" tabindex="0"){
        id: id(:tab, i),
        onmouseenter: handle_enable,
        ontouchstart: handle_enable,
        aria: {
          selected: (name == active).to_s,
          controls: id(:panel, i)
        }
      }= name

  = names.map.with_index do |name, i|
    .panel(role="tabpanel" tabindex="0"){
      id: id(:panel, i),
      hidden: name != active,
      aria: {
        labelledby: id(:tab, i),
        expanded: (name == active).to_s,
      }
    }
      = if enabled.include?(name)
        %slot(name=name)
:css
  .tabs {
    border-radius: 2px;
    border: var(--thin-border);
    background: var(--bright);
  }

  .tablist {
    display: flex;
    border-bottom: var(--thin-border);
    background: #0001;
    user-select: none;
  }

  button {
    border: none;
    padding: .5em 1em;
    background: transparent;
    cursor: pointer;
    color: var(--accent-color);
    background: var(--bright);
    z-index: 0;
    flex: 1;
    transition: color 100ms, background 100ms;
  }

  button:hover {
    font-weight: bold;
  }

  button:active {
    background: var(--blue-bright);
  }

  button:focus {
    z-index: 1;
  }

  button[aria-selected="true"] {
    background: var(--accent-color);
    font-weight: bold;
    color: #fff;
  }

  .panel {
    margin: 1em;
  }
