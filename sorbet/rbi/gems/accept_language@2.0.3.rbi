# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `accept_language` gem.
# Please instead update this file by running `bin/tapioca gem accept_language`.

# Tiny library for parsing the Accept-Language header.
#
# @example
#   AcceptLanguage.parse("da, en-GB;q=0.8, en;q=0.7") # => #<AcceptLanguage::Parser:0x00007 @languages_range={"da"=>0.1e1, "en-GB"=>0.8e0, "en"=>0.7e0}>
# @see https://tools.ietf.org/html/rfc2616#section-14.4
#
# source://accept_language//lib/accept_language.rb#7
module AcceptLanguage
  class << self
    # @example
    #   parse("da, en-GB;q=0.8, en;q=0.7") # => #<AcceptLanguage::Parser:0x00007 @languages_range={"da"=>0.1e1, "en-GB"=>0.8e0, "en"=>0.7e0}>
    # @note Parse an Accept-Language header field into a language range.
    # @return [#match] a parser that responds to #match.
    #
    # source://accept_language//lib/accept_language.rb#12
    def parse(field); end
  end
end

# @example
#   Matcher.new("da" => 1.0, "en-GB" => 0.8, "en" => 0.7).call(:ug, :kk, :ru, :en) # => :en
#   Matcher.new("da" => 1.0, "en-GB" => 0.8, "en" => 0.7).call(:fr, :en, :"en-GB") # => :"en-GB"
# @note Compare an Accept-Language header value with your application's
#   supported languages to find the common languages that could be presented
#   to a user.
#
# source://accept_language//lib/accept_language/matcher.rb#10
class AcceptLanguage::Matcher
  # @param languages_range [Hash<String, BigDecimal>] A list of accepted
  #   languages with their respective qualities.
  # @return [Matcher] a new instance of Matcher
  #
  # source://accept_language//lib/accept_language/matcher.rb#17
  def initialize(**languages_range); end

  # @example Uyghur, Kazakh, Russian and English languages are available.
  #   call(:ug, :kk, :ru, :en)
  # @param available_langtags [Array<String, Symbol>] The list of available
  #   languages.
  # @return [String, Symbol, nil] The language that best matches.
  #
  # source://accept_language//lib/accept_language/matcher.rb#38
  def call(*available_langtags); end

  # Returns the value of attribute excluded_langtags.
  #
  # source://accept_language//lib/accept_language/matcher.rb#13
  def excluded_langtags; end

  # Returns the value of attribute preferred_langtags.
  #
  # source://accept_language//lib/accept_language/matcher.rb#13
  def preferred_langtags; end

  private

  # source://accept_language//lib/accept_language/matcher.rb#57
  def any_other_langtag(*available_langtags); end

  # source://accept_language//lib/accept_language/matcher.rb#67
  def drop_unacceptable(*available_langtags); end

  # @return [Boolean]
  #
  # source://accept_language//lib/accept_language/matcher.rb#75
  def unacceptable?(langtag); end

  # @return [Boolean]
  #
  # source://accept_language//lib/accept_language/matcher.rb#81
  def wildcard?(value); end
end

# source://accept_language//lib/accept_language/matcher.rb#11
AcceptLanguage::Matcher::WILDCARD = T.let(T.unsafe(nil), String)

# @example
#   Parser.new("da, en-GB;q=0.8, en;q=0.7") # => #<AcceptLanguage::Parser:0x00007 @languages_range={"da"=>0.1e1, "en-GB"=>0.8e0, "en"=>0.7e0}>
# @note Parser for Accept-Language header fields.
# @see https://tools.ietf.org/html/rfc2616#section-14.4
#
# source://accept_language//lib/accept_language/parser.rb#10
class AcceptLanguage::Parser
  # @param field [String] The Accept-Language header field to parse.
  # @return [Parser] a new instance of Parser
  # @see https://tools.ietf.org/html/rfc2616#section-14.4
  #
  # source://accept_language//lib/accept_language/parser.rb#20
  def initialize(field); end

  # Returns the value of attribute languages_range.
  #
  # source://accept_language//lib/accept_language/parser.rb#16
  def languages_range; end

  # @example Uyghur, Kazakh, Russian and English languages are available.
  #   match(:ug, :kk, :ru, :en)
  # @param available_langtags [Array<String, Symbol>] The list of available
  #   languages.
  # @return [String, Symbol, nil] The language that best matches.
  #
  # source://accept_language//lib/accept_language/parser.rb#29
  def match(*available_langtags); end

  private

  # @example
  #   import('da, en-GB;q=0.8, en;q=0.7') # => {"da"=>0.1e1, "en-GB"=>0.8e0, "en"=>0.7e0}
  # @return [Hash<String, BigDecimal>] A list of accepted languages with their
  #   respective qualities.
  #
  # source://accept_language//lib/accept_language/parser.rb#39
  def import(field); end
end

# source://accept_language//lib/accept_language/parser.rb#11
AcceptLanguage::Parser::DEFAULT_QUALITY = T.let(T.unsafe(nil), BigDecimal)

# source://accept_language//lib/accept_language/parser.rb#12
AcceptLanguage::Parser::SEPARATOR = T.let(T.unsafe(nil), String)

# source://accept_language//lib/accept_language/parser.rb#13
AcceptLanguage::Parser::SPACE = T.let(T.unsafe(nil), String)

# source://accept_language//lib/accept_language/parser.rb#14
AcceptLanguage::Parser::SUFFIX = T.let(T.unsafe(nil), String)
