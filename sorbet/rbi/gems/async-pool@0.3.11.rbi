# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `async-pool` gem.
# Please instead update this file by running `bin/tapioca gem async-pool`.

# source://async-pool-0.3.11/lib/async/pool/controller.rb:27
module Async; end

# source://async-pool-0.3.11/lib/async/pool/controller.rb:28
module Async::Pool; end

# source://async-pool-0.3.11/lib/async/pool/controller.rb:29
class Async::Pool::Controller
  # @return [Controller] a new instance of Controller
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:34
  def initialize(constructor, limit: T.unsafe(nil), concurrency: T.unsafe(nil)); end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:95
  def acquire; end

  # Whether the pool has any active resources.
  #
  # @return [Boolean]
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:68
  def active?; end

  # Whether there are available resources, i.e. whether {#acquire} can reuse an existing resource.
  #
  # @return [Boolean]
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:82
  def available?; end

  # Whether there are resources which are currently in use.
  #
  # @return [Boolean]
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:73
  def busy?; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:119
  def close; end

  # @return [Boolean]
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:91
  def empty?; end

  # Retire (and close) all unused resources. If a block is provided, it should implement the desired functionality for unused resources.
  #
  # @param retain [Integer] the minimum number of resources to retain.
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:139
  def prune(retain = T.unsafe(nil)); end

  # Make the resource resources and let waiting tasks know that there is something resources.
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:108
  def release(resource); end

  # Returns the value of attribute resources.
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:61
  def resources; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:169
  def retire(resource); end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:63
  def size; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:128
  def to_s; end

  # Wait until a pool resource has been freed.
  #
  # source://async-pool-0.3.11/lib/async/pool/controller.rb:87
  def wait; end

  protected

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:200
  def availability_string; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:267
  def available_resource; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:250
  def create_resource; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:210
  def free; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:214
  def reuse(resource); end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:183
  def start_gardener; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:206
  def usage; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:196
  def usage_string; end

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:234
  def wait_for_resource; end

  private

  # source://async-pool-0.3.11/lib/async/pool/controller.rb:280
  def get_resource; end

  class << self
    # source://async-pool-0.3.11/lib/async/pool/controller.rb:30
    def wrap(**options, &block); end
  end
end

# source://async-2.0.3/lib/async/version.rb:24
Async::VERSION = T.let(T.unsafe(nil), String)
