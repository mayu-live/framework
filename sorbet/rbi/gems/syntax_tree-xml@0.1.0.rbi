# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `syntax_tree-xml` gem.
# Please instead update this file by running `bin/tapioca gem syntax_tree-xml`.

# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#3
module SyntaxTree
  class << self
    # source://syntax_tree/3.6.0/lib/syntax_tree.rb#52
    def format(source, maxwidth = T.unsafe(nil)); end

    # source://syntax_tree/3.6.0/lib/syntax_tree.rb#45
    def parse(source); end

    # source://syntax_tree/3.6.0/lib/syntax_tree.rb#62
    def read(filepath); end

    # source://syntax_tree/3.6.0/lib/syntax_tree.rb#40
    def register_handler(extension, handler); end
  end
end

# source://syntax_tree/3.6.0/lib/syntax_tree.rb#36
SyntaxTree::DEFAULT_PRINT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://syntax_tree/3.6.0/lib/syntax_tree.rb#30
SyntaxTree::HANDLERS = T.let(T.unsafe(nil), Hash)

# source://syntax_tree/3.6.0/lib/syntax_tree/node.rb#5131
SyntaxTree::PATTERNS = T.let(T.unsafe(nil), Array)

# source://syntax_tree/3.6.0/lib/syntax_tree/version.rb#4
SyntaxTree::VERSION = T.let(T.unsafe(nil), String)

# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#4
module SyntaxTree::XML
  class << self
    # source://syntax_tree-xml//lib/syntax_tree/xml.rb#15
    def format(source, maxwidth = T.unsafe(nil)); end

    # source://syntax_tree-xml//lib/syntax_tree/xml.rb#19
    def parse(source); end

    # source://syntax_tree-xml//lib/syntax_tree/xml.rb#23
    def read(filepath); end
  end
end

# An Attribute is a key-value pair within a tag. It contains the key, the
# equals sign, and the value.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#337
class SyntaxTree::XML::Attribute < ::SyntaxTree::XML::Node
  # @return [Attribute] a new instance of Attribute
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#340
  def initialize(key:, equals:, value:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#347
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#351
  def child_nodes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#351
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#357
  def deconstruct_keys(keys); end

  # Returns the value of attribute equals.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#338
  def equals; end

  # Returns the value of attribute key.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#338
  def key; end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#338
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#338
  def value; end
end

# A CharData contains either plain text or whitespace within an element.
# It wraps a single token value.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#364
class SyntaxTree::XML::CharData < ::SyntaxTree::XML::Node
  # @return [CharData] a new instance of CharData
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#367
  def initialize(value:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#372
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#376
  def child_nodes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#376
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#382
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#365
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#365
  def value; end
end

# A document type declaration is a special kind of tag that specifies the
# type of the document. It contains an opening declaration, the name of
# the document type, an optional external identifier, and a closing of the
# tag.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#149
class SyntaxTree::XML::DocType < ::SyntaxTree::XML::Node
  # @return [DocType] a new instance of DocType
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#152
  def initialize(opening:, name:, external_id:, closing:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#160
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#164
  def child_nodes; end

  # Returns the value of attribute closing.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#150
  def closing; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#164
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#170
  def deconstruct_keys(keys); end

  # Returns the value of attribute external_id.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#150
  def external_id; end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#150
  def location; end

  # Returns the value of attribute name.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#150
  def name; end

  # Returns the value of attribute opening.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#150
  def opening; end
end

# The Document node is the top of the syntax tree. It contains an optional
# prolog, an optional doctype declaration, any number of optional
# miscellenous elements like comments, whitespace, or processing
# instructions, and a root element.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#81
class SyntaxTree::XML::Document < ::SyntaxTree::XML::Node
  # @return [Document] a new instance of Document
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#84
  def initialize(prolog:, miscs:, doctype:, element:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#92
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#96
  def child_nodes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#96
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#102
  def deconstruct_keys(keys); end

  # Returns the value of attribute doctype.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#82
  def doctype; end

  # Returns the value of attribute element.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#82
  def element; end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#82
  def location; end

  # Returns the value of attribute miscs.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#82
  def miscs; end

  # Returns the value of attribute prolog.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#82
  def prolog; end
end

# An element is a child of the document. It contains an opening tag, any
# optional content within the tag, and a closing tag. It can also
# potentially contain an opening tag that self-closes, in which case the
# content and closing tag will be nil.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#221
class SyntaxTree::XML::Element < ::SyntaxTree::XML::Node
  # @return [Element] a new instance of Element
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#283
  def initialize(opening_tag:, content:, closing_tag:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#290
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#294
  def child_nodes; end

  # Returns the value of attribute closing_tag.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#281
  def closing_tag; end

  # Returns the value of attribute content.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#281
  def content; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#294
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#300
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#281
  def location; end

  # Returns the value of attribute opening_tag.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#281
  def opening_tag; end
end

# The closing tag of an element. It contains the opening character (<),
# the name of the element, and the closing character (>).
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#256
class SyntaxTree::XML::Element::ClosingTag < ::SyntaxTree::XML::Node
  # @return [ClosingTag] a new instance of ClosingTag
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#259
  def initialize(opening:, name:, closing:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#266
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#270
  def child_nodes; end

  # Returns the value of attribute closing.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#257
  def closing; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#270
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#276
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#257
  def location; end

  # Returns the value of attribute name.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#257
  def name; end

  # Returns the value of attribute opening.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#257
  def opening; end
end

# The opening tag of an element. It contains the opening character (<),
# the name of the element, any optional attributes, and the closing
# token (either > or />).
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#222
class SyntaxTree::XML::Element::OpeningTag < ::SyntaxTree::XML::Node
  # @return [OpeningTag] a new instance of OpeningTag
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#225
  def initialize(opening:, name:, attributes:, closing:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#233
  def accept(visitor); end

  # Returns the value of attribute attributes.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#223
  def attributes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#237
  def child_nodes; end

  # Returns the value of attribute closing.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#223
  def closing; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#237
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#243
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#223
  def location; end

  # Returns the value of attribute name.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#223
  def name; end

  # Returns the value of attribute opening.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#223
  def opening; end
end

# An external ID is a child of a document type declaration. It represents
# the location where the external identifier is located. It contains a
# type (either system or public), an optional public id literal, and the
# system literal.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#185
class SyntaxTree::XML::ExternalID < ::SyntaxTree::XML::Node
  # @return [ExternalID] a new instance of ExternalID
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#188
  def initialize(type:, public_id:, system_id:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#194
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#198
  def child_nodes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#198
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#204
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#186
  def location; end

  # Returns the value of attribute public_id.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#186
  def public_id; end

  # Returns the value of attribute system_id.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#186
  def system_id; end

  # Returns the value of attribute type.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#186
  def type; end
end

# source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#5
class SyntaxTree::XML::Format < ::SyntaxTree::XML::Visitor
  # @return [Format] a new instance of Format
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#8
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#6
  def q; end

  # Visit an Attribute node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#203
  def visit_attribute(node); end

  # Visit a CharData node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#212
  def visit_char_data(node); end

  # Visit an Element::ClosingTag node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#189
  def visit_closing_tag(node); end

  # Visit a Doctype node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#59
  def visit_doctype(node); end

  # Visit a Document node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#18
  def visit_document(node); end

  # Visit an Element node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#96
  def visit_element(node); end

  # Visit an ExternalID node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#75
  def visit_external_id(node); end

  # Visit a Misc node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#221
  def visit_misc(node); end

  # Visit an Element::OpeningTag node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#169
  def visit_opening_tag(node); end

  # Visit a Prolog node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#40
  def visit_prolog(node); end

  # Visit a Reference node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#198
  def visit_reference(node); end

  # Visit a Token node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#13
  def visit_token(node); end

  private

  # Format a text by splitting nicely at newlines and spaces.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/format.rb#228
  def format_text(q, value); end
end

# A Location represents a position for a node in the source file.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#6
class SyntaxTree::XML::Location
  # @return [Location] a new instance of Location
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#9
  def initialize(start_char:, end_char:, start_line:, end_line:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#34
  def <=>(other); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#16
  def deconstruct_keys(keys); end

  # Returns the value of attribute end_char.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#7
  def end_char; end

  # Returns the value of attribute end_line.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#7
  def end_line; end

  # Returns the value of attribute start_char.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#7
  def start_char; end

  # Returns the value of attribute start_line.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#7
  def start_line; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#25
  def to(other); end
end

# A Misc is a catch-all for miscellaneous content outside the root tag of
# the XML document. It contains a single token which can be either a
# comment, a processing instruction, or whitespace.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#390
class SyntaxTree::XML::Misc < ::SyntaxTree::XML::Node
  # @return [Misc] a new instance of Misc
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#393
  def initialize(value:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#398
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#402
  def child_nodes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#402
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#408
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#391
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#391
  def value; end
end

# A parent node that contains a bit of shared functionality.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#40
class SyntaxTree::XML::Node
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#41
  def format(q); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#45
  def pretty_print(q); end
end

# source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#5
class SyntaxTree::XML::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#28
  def initialize(source); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#33
  def parse; end

  # Returns the value of attribute source.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#26
  def source; end

  # Returns the value of attribute tokens.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#26
  def tokens; end

  private

  # We're going to attempt to parse everything by yielding to the block. If
  # nothing is returned by the block, then we're going to raise an error.
  # Otherwise we'll return the value returned by the block.
  #
  # @raise [MissingTokenError]
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#193
  def atleast; end

  # If the next token in the list of tokens matches the expected type, then
  # we're going to create a new Token, advance the token enumerator, and
  # return the new Token. Otherwise we're going to raise a
  # MissingTokenError.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#160
  def consume(expected); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#39
  def make_tokens; end

  # We're going to attempt to parse with the block many times. We'll stop
  # parsing once we get an error back from the block.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#201
  def many; end

  # We're going to yield to the block which should attempt to consume some
  # number of tokens. If any of them are missing, then we're going to return
  # nil from this block.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#185
  def maybe; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#352
  def parse_attribute; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#365
  def parse_chardata; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#306
  def parse_closing_tag; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#277
  def parse_content; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#249
  def parse_doctype; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#215
  def parse_document; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#319
  def parse_element; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#264
  def parse_external_id; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#372
  def parse_misc; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#288
  def parse_opening_tag; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#236
  def parse_prolog; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#342
  def parse_reference; end
end

# This error occurs when a certain token is expected in a certain place
# but is not found. Sometimes this is handled internally because some
# elements are optional. Other times it is not and it is raised to end the
# parsing process.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#23
class SyntaxTree::XML::Parser::MissingTokenError < ::SyntaxTree::XML::Parser::ParseError; end

# source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#12
SyntaxTree::XML::Parser::NAME = T.let(T.unsafe(nil), String)

# source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#9
SyntaxTree::XML::Parser::NAME_CHAR = T.let(T.unsafe(nil), String)

# source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#6
SyntaxTree::XML::Parser::NAME_START = T.let(T.unsafe(nil), String)

# This is the parent class of any kind of errors that will be raised by
# the parser.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/parser.rb#16
class SyntaxTree::XML::Parser::ParseError < ::StandardError; end

# source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#5
class SyntaxTree::XML::PrettyPrint < ::SyntaxTree::XML::Visitor
  # @return [PrettyPrint] a new instance of PrettyPrint
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#8
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#6
  def q; end

  # Visit an Attribute node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#58
  def visit_attribute(node); end

  # Visit a CharData node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#63
  def visit_char_data(node); end

  # Visit an Element::ClosingTag node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#48
  def visit_closing_tag(node); end

  # Visit a Doctype node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#28
  def visit_doctype(node); end

  # Visit a Document node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#18
  def visit_document(node); end

  # Visit an Element node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#38
  def visit_element(node); end

  # Visit an ExternalID node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#33
  def visit_external_id(node); end

  # Visit a Misc node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#68
  def visit_misc(node); end

  # Visit an Element::OpeningTag node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#43
  def visit_opening_tag(node); end

  # Visit a Prolog node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#23
  def visit_prolog(node); end

  # Visit a Reference node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#53
  def visit_reference(node); end

  # Visit a Token node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#13
  def visit_token(node); end

  private

  # A generic visit node function for how we pretty print nodes.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/pretty_print.rb#75
  def visit_node(type, node); end
end

# The prolog to the document includes an XML declaration which opens the
# tag, any number of attributes, and a closing of the tag.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#115
class SyntaxTree::XML::Prolog < ::SyntaxTree::XML::Node
  # @return [Prolog] a new instance of Prolog
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#118
  def initialize(opening:, attributes:, closing:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#125
  def accept(visitor); end

  # Returns the value of attribute attributes.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#116
  def attributes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#129
  def child_nodes; end

  # Returns the value of attribute closing.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#116
  def closing; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#129
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#135
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#116
  def location; end

  # Returns the value of attribute opening.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#116
  def opening; end
end

# A Reference is either a character or entity reference. It contains a
# single value that is the token it contains.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#312
class SyntaxTree::XML::Reference < ::SyntaxTree::XML::Node
  # @return [Reference] a new instance of Reference
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#315
  def initialize(value:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#320
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#324
  def child_nodes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#324
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#330
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#313
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#313
  def value; end
end

# A Token is any kind of lexical token from the source. It has a type, a
# value which is a subset of the source, and an index where it starts in
# the source.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#53
class SyntaxTree::XML::Token < ::SyntaxTree::XML::Node
  # @return [Token] a new instance of Token
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#56
  def initialize(type:, value:, location:); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#62
  def accept(visitor); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#66
  def child_nodes; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#66
  def deconstruct; end

  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#72
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#54
  def location; end

  # Returns the value of attribute type.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#54
  def type; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/nodes.rb#54
  def value; end
end

# Provides a visitor interface for visiting certain nodes. It's used
# internally to implement formatting and pretty-printing. It could also be
# used externally to visit a subset of nodes that are relevant to a certain
# task.
#
# source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#9
class SyntaxTree::XML::Visitor
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#10
  def visit(node); end

  private

  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#16
  def visit_all(nodes); end

  # Visit an Attribute node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_attribute(node); end

  # Visit a CharData node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_char_data(node); end

  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_child_nodes(node); end

  # Visit an Element::ClosingTag node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_closing_tag(node); end

  # Visit a Doctype node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_doctype(node); end

  # Visit a Document node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_document(node); end

  # Visit an Element node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_element(node); end

  # Visit an ExternalID node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_external_id(node); end

  # Visit a Misc node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_misc(node); end

  # Visit an Element::OpeningTag node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_opening_tag(node); end

  # Visit a Prolog node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_prolog(node); end

  # Visit a Reference node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_reference(node); end

  # Visit a Token node.
  #
  # source://syntax_tree-xml//lib/syntax_tree/xml/visitor.rb#20
  def visit_token(node); end
end
