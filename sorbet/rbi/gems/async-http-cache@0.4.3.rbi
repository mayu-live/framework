# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `async-http-cache` gem.
# Please instead update this file by running `bin/tapioca gem async-http-cache`.

# source://async-http-cache-0.4.3/lib/async/http/cache/version.rb:23
module Async; end

# source://async-http-cache-0.4.3/lib/async/http/cache/version.rb:24
module Async::HTTP; end

# source://async-http-cache-0.4.3/lib/async/http/cache/version.rb:25
module Async::HTTP::Cache; end

# source://async-http-cache-0.4.3/lib/async/http/cache/body.rb:30
module Async::HTTP::Cache::Body
  class << self
    # source://async-http-cache-0.4.3/lib/async/http/cache/body.rb:34
    def wrap(response, &block); end
  end
end

# source://async-http-cache-0.4.3/lib/async/http/cache/body.rb:32
Async::HTTP::Cache::Body::ETAG = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/body.rb:31
Async::HTTP::Cache::Body::TRAILER = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:33
class Async::HTTP::Cache::General < ::Protocol::HTTP::Middleware
  # @return [General] a new instance of General
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:54
  def initialize(app, store: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:77
  def cacheable?(request); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:130
  def call(request); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:65
  def close; end

  # Returns the value of attribute count.
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:62
  def count; end

  # source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:71
  def key(request); end

  # Returns the value of attribute store.
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:63
  def store; end

  # source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:105
  def wrap(key, request, response); end
end

# source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:37
Async::HTTP::Cache::General::AUTHORIZATION = T.let(T.unsafe(nil), String)

# Status codes of responses that MAY be stored by a cache or used in reply
# to a subsequent request.
#
# http://tools.ietf.org/html/rfc2616#section-13.4
#
# source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:44
Async::HTTP::Cache::General::CACHEABLE_RESPONSE_CODES = T.let(T.unsafe(nil), Hash)

# source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:34
Async::HTTP::Cache::General::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:36
Async::HTTP::Cache::General::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/general.rb:38
Async::HTTP::Cache::General::COOKIE = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:29
class Async::HTTP::Cache::Response < ::Protocol::HTTP::Response
  # @return [Response] a new instance of Response
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:36
  def initialize(response, body); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:77
  def age; end

  # @return [Boolean]
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:59
  def cacheable?; end

  # source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:87
  def dup; end

  # source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:55
  def etag; end

  # @return [Boolean]
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:81
  def expired?; end

  # Returns the value of attribute generated_at.
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:53
  def generated_at; end
end

# source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:30
Async::HTTP::Cache::Response::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:32
Async::HTTP::Cache::Response::ETAG = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:31
Async::HTTP::Cache::Response::SET_COOKIE = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/response.rb:34
Async::HTTP::Cache::Response::X_CACHE = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:26
module Async::HTTP::Cache::Store
  class << self
    # source://async-http-cache-0.4.3/lib/async/http/cache/store.rb:30
    def default; end
  end
end

# source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:28
Async::HTTP::Cache::Store::ACCEPT_ENCODING = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:27
class Async::HTTP::Cache::Store::Memory
  # @return [Memory] a new instance of Memory
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:28
  def initialize(limit: T.unsafe(nil), maximum_size: T.unsafe(nil), prune_interval: T.unsafe(nil)); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:62
  def close; end

  # Returns the value of attribute index.
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:66
  def index; end

  # source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:97
  def insert(key, request, response); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:71
  def lookup(key, request); end

  # @return [Integer] the number of pruned entries.
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:107
  def prune; end
end

# source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:68
Async::HTTP::Cache::Store::Memory::IF_NONE_MATCH = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/store/memory.rb:69
Async::HTTP::Cache::Store::Memory::NOT_MODIFIED = T.let(T.unsafe(nil), Protocol::HTTP::Response)

# source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:27
Async::HTTP::Cache::Store::VARY = T.let(T.unsafe(nil), String)

# source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:30
class Async::HTTP::Cache::Store::Vary
  # @return [Vary] a new instance of Vary
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:31
  def initialize(delegate, vary = T.unsafe(nil)); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:36
  def close; end

  # Returns the value of attribute delegate.
  #
  # source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:40
  def delegate; end

  # source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:65
  def insert(key, request, response); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:52
  def key_for(headers, vary); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:56
  def lookup(key, request); end

  # source://async-http-cache-0.4.3/lib/async/http/cache/store/vary.rb:42
  def normalize(request); end
end

# source://async-http-cache-0.4.3/lib/async/http/cache/version.rb:26
Async::HTTP::Cache::VERSION = T.let(T.unsafe(nil), String)

# source://async-http-0.59.1/lib/async/http/client.rb:37
Async::HTTP::DEFAULT_RETRIES = T.let(T.unsafe(nil), Integer)

# source://async-http-0.59.1/lib/async/http/version.rb:25
Async::HTTP::VERSION = T.let(T.unsafe(nil), String)

# source://async-2.0.3/lib/async/version.rb:24
Async::VERSION = T.let(T.unsafe(nil), String)
