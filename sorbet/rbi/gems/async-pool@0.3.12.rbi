# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `async-pool` gem.
# Please instead update this file by running `bin/tapioca gem async-pool`.

# source://async-pool//lib/async/pool/controller.rb#13
module Async; end

# source://async-pool//lib/async/pool/controller.rb#14
module Async::Pool; end

# source://async-pool//lib/async/pool/controller.rb#15
class Async::Pool::Controller
  # @return [Controller] a new instance of Controller
  #
  # source://async-pool//lib/async/pool/controller.rb#20
  def initialize(constructor, limit: T.unsafe(nil), concurrency: T.unsafe(nil)); end

  # source://async-pool//lib/async/pool/controller.rb#81
  def acquire; end

  # Whether the pool has any active resources.
  #
  # @return [Boolean]
  #
  # source://async-pool//lib/async/pool/controller.rb#54
  def active?; end

  # Whether there are available resources, i.e. whether {#acquire} can reuse an existing resource.
  #
  # @return [Boolean]
  #
  # source://async-pool//lib/async/pool/controller.rb#68
  def available?; end

  # Whether there are resources which are currently in use.
  #
  # @return [Boolean]
  #
  # source://async-pool//lib/async/pool/controller.rb#59
  def busy?; end

  # source://async-pool//lib/async/pool/controller.rb#105
  def close; end

  # @return [Boolean]
  #
  # source://async-pool//lib/async/pool/controller.rb#77
  def empty?; end

  # Retire (and close) all unused resources. If a block is provided, it should implement the desired functionality for unused resources.
  #
  # @param retain [Integer] the minimum number of resources to retain.
  #
  # source://async-pool//lib/async/pool/controller.rb#132
  def prune(retain = T.unsafe(nil)); end

  # Make the resource resources and let waiting tasks know that there is something resources.
  #
  # source://async-pool//lib/async/pool/controller.rb#94
  def release(resource); end

  # Returns the value of attribute resources.
  #
  # source://async-pool//lib/async/pool/controller.rb#47
  def resources; end

  # source://async-pool//lib/async/pool/controller.rb#164
  def retire(resource); end

  # source://async-pool//lib/async/pool/controller.rb#49
  def size; end

  # source://async-pool//lib/async/pool/controller.rb#121
  def to_s; end

  # Wait until a pool resource has been freed.
  #
  # source://async-pool//lib/async/pool/controller.rb#73
  def wait; end

  protected

  # source://async-pool//lib/async/pool/controller.rb#195
  def availability_string; end

  # source://async-pool//lib/async/pool/controller.rb#262
  def available_resource; end

  # source://async-pool//lib/async/pool/controller.rb#245
  def create_resource; end

  # source://async-pool//lib/async/pool/controller.rb#205
  def free; end

  # source://async-pool//lib/async/pool/controller.rb#209
  def reuse(resource); end

  # source://async-pool//lib/async/pool/controller.rb#178
  def start_gardener; end

  # source://async-pool//lib/async/pool/controller.rb#201
  def usage; end

  # source://async-pool//lib/async/pool/controller.rb#191
  def usage_string; end

  # source://async-pool//lib/async/pool/controller.rb#229
  def wait_for_resource; end

  private

  # source://async-pool//lib/async/pool/controller.rb#275
  def get_resource; end

  class << self
    # source://async-pool//lib/async/pool/controller.rb#16
    def wrap(**options, &block); end
  end
end

# source://async/2.0.3/lib/async/version.rb#24
Async::VERSION = T.let(T.unsafe(nil), String)
