# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prometheus-client` gem.
# Please instead update this file by running `bin/tapioca gem prometheus-client`.

# Prometheus is a generic time-series collection and computation server.
#
# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#3
module Prometheus; end

# Client is a ruby implementation for a Prometheus compatible client.
#
# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#4
module Prometheus::Client
  class << self
    # source://prometheus-client//lib/prometheus/client.rb#14
    def config; end

    # Returns a default registry object
    #
    # source://prometheus-client//lib/prometheus/client.rb#10
    def registry; end
  end
end

# source://prometheus-client//lib/prometheus/client/config.rb#7
class Prometheus::Client::Config
  # @return [Config] a new instance of Config
  #
  # source://prometheus-client//lib/prometheus/client/config.rb#10
  def initialize; end

  # Returns the value of attribute data_store.
  #
  # source://prometheus-client//lib/prometheus/client/config.rb#8
  def data_store; end

  # Sets the attribute data_store
  #
  # @param value the value to set the attribute data_store to.
  #
  # source://prometheus-client//lib/prometheus/client/config.rb#8
  def data_store=(_arg0); end
end

# Counter is a metric that exposes merely a sum or tally of things.
#
# source://prometheus-client//lib/prometheus/client/counter.rb#8
class Prometheus::Client::Counter < ::Prometheus::Client::Metric
  # @raise [ArgumentError]
  #
  # source://prometheus-client//lib/prometheus/client/counter.rb#13
  def increment(by: T.unsafe(nil), labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/counter.rb#9
  def type; end
end

# source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#3
module Prometheus::Client::DataStores; end

# Stores data in binary files, one file per process and per metric.
# This is generally the recommended store to use to deal with pre-fork servers and
# other "multi-process" scenarios.
#
# Each process will get a file for a metric, and it will manage its contents by
# storing keys next to binary-encoded Floats, and keeping track of the offsets of
# those Floats, to be able to update them directly as they increase.
#
# When exporting metrics, the process that gets scraped by Prometheus  will find
# all the files that apply to a metric, read their contents, and aggregate them
# (generally that means SUMming the values for each labelset).
#
# In order to do this, each Metric needs an `:aggregation` setting, specifying how
# to aggregate the multiple possible values we can get for each labelset. By default,
# Counters, Histograms and Summaries get `SUM`med, and Gauges will report `ALL`
# values, tagging each one with a `pid` label.
# For Gauges, it's also possible to set `SUM`, MAX` or `MIN` as aggregation, to get
# the highest / lowest value / or the sum of all the processes / threads.
#
# Before using this Store, please read the "`DirectFileStore` caveats and things to
# keep in mind" section of the main README in this repository. It includes a number
# of important things to keep in mind.
#
# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#30
class Prometheus::Client::DataStores::DirectFileStore
  # @return [DirectFileStore] a new instance of DirectFileStore
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#36
  def initialize(dir:); end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#41
  def for_metric(metric_name, metric_type:, metric_settings: T.unsafe(nil)); end

  private

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#57
  def validate_metric_settings(metric_type, metric_settings); end
end

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#32
Prometheus::Client::DataStores::DirectFileStore::AGGREGATION_MODES = T.let(T.unsafe(nil), Array)

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#32
Prometheus::Client::DataStores::DirectFileStore::ALL = T.let(T.unsafe(nil), Symbol)

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#34
Prometheus::Client::DataStores::DirectFileStore::DEFAULT_GAUGE_SETTINGS = T.let(T.unsafe(nil), Hash)

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#33
Prometheus::Client::DataStores::DirectFileStore::DEFAULT_METRIC_SETTINGS = T.let(T.unsafe(nil), Hash)

# A dict of doubles, backed by an file we access directly as a byte array.
#
# The file starts with a 4 byte int, indicating how much of it is used.
# Then 4 bytes of padding.
# There's then a number of entries, consisting of a 4 byte int which is the
# size of the next field, a utf-8 encoded string key, padding to an 8 byte
# alignment, and then a 8 byte float which is the value, and then a 8 byte
# float which is the unix timestamp when the value was set.
#
# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#231
class Prometheus::Client::DataStores::DirectFileStore::FileMappedDict
  # @return [FileMappedDict] a new instance of FileMappedDict
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#236
  def initialize(filename, readonly = T.unsafe(nil)); end

  # Return a list of key-value pairs
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#257
  def all_values; end

  # Returns the value of attribute capacity.
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#234
  def capacity; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#289
  def close; end

  # Returns the value of attribute positions.
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#234
  def positions; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#267
  def read_value(key); end

  # Returns the value of attribute used.
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#234
  def used; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#293
  def with_file_lock; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#277
  def write_value(key, value); end

  private

  # Initialize a value. Lock must be held by caller.
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#323
  def init_value(key); end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#302
  def open_file(filename, readonly); end

  # Read position of all keys. No locking is performed.
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#341
  def populate_positions; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#318
  def resize_file(new_capacity); end
end

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#232
Prometheus::Client::DataStores::DirectFileStore::FileMappedDict::INITIAL_FILE_SIZE = T.let(T.unsafe(nil), Integer)

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#31
class Prometheus::Client::DataStores::DirectFileStore::InvalidStoreSettingsError < ::StandardError; end

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#32
Prometheus::Client::DataStores::DirectFileStore::MAX = T.let(T.unsafe(nil), Symbol)

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#32
Prometheus::Client::DataStores::DirectFileStore::MIN = T.let(T.unsafe(nil), Symbol)

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#32
Prometheus::Client::DataStores::DirectFileStore::MOST_RECENT = T.let(T.unsafe(nil), Symbol)

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#75
class Prometheus::Client::DataStores::DirectFileStore::MetricStore
  # @return [MetricStore] a new instance of MetricStore
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#78
  def initialize(metric_name:, store_settings:, metric_settings:); end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#128
  def all_values; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#122
  def get(labels:); end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#108
  def increment(labels:, by: T.unsafe(nil)); end

  # Returns the value of attribute metric_name.
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#76
  def metric_name; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#102
  def set(labels:, val:); end

  # Returns the value of attribute store_settings.
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#76
  def store_settings; end

  # Synchronize is used to do a multi-process Mutex, when incrementing multiple
  # values at once, so that the other process, reading the file for export, doesn't
  # get incomplete increments.
  #
  # `in_process_sync`, instead, is just used so that two threads don't increment
  # the same value and get a context switch between read and write leading to an
  # inconsistency
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#94
  def synchronize; end

  private

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#195
  def aggregate_values(values); end

  # Filename for this metric's PStore (one per process)
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#182
  def filemap_filename; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#160
  def in_process_sync; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#172
  def internal_store; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#191
  def process_id; end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#164
  def store_key(labels); end

  # source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#187
  def stores_for_metric; end
end

# source://prometheus-client//lib/prometheus/client/data_stores/direct_file_store.rb#32
Prometheus::Client::DataStores::DirectFileStore::SUM = T.let(T.unsafe(nil), Symbol)

# Stores all the data in simple hashes, one per metric. Each of these metrics
# synchronizes access to their hash, but multiple metrics can run observations
# concurrently.
#
# source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#7
class Prometheus::Client::DataStores::Synchronized
  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#10
  def for_metric(metric_name, metric_type:, metric_settings: T.unsafe(nil)); end

  private

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#18
  def validate_metric_settings(metric_settings:); end
end

# source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#8
class Prometheus::Client::DataStores::Synchronized::InvalidStoreSettingsError < ::StandardError; end

# source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#25
class Prometheus::Client::DataStores::Synchronized::MetricStore
  # @return [MetricStore] a new instance of MetricStore
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#26
  def initialize; end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#53
  def all_values; end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#47
  def get(labels:); end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#41
  def increment(labels:, by: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#35
  def set(labels:, val:); end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#31
  def synchronize; end
end

# source://prometheus-client//lib/prometheus/client/formats/text.rb#5
module Prometheus::Client::Formats; end

# Text format is human readable mainly used for manual inspection.
#
# source://prometheus-client//lib/prometheus/client/formats/text.rb#7
module Prometheus::Client::Formats::Text
  class << self
    # source://prometheus-client//lib/prometheus/client/formats/text.rb#23
    def marshal(registry); end

    private

    # source://prometheus-client//lib/prometheus/client/formats/text.rb#84
    def escape(string, format = T.unsafe(nil)); end

    # @yield [metric("#{name}_sum", l, value["sum"])]
    #
    # source://prometheus-client//lib/prometheus/client/formats/text.rb#58
    def histogram(name, set, value); end

    # source://prometheus-client//lib/prometheus/client/formats/text.rb#74
    def labels(set); end

    # source://prometheus-client//lib/prometheus/client/formats/text.rb#70
    def metric(name, labels, value); end

    # source://prometheus-client//lib/prometheus/client/formats/text.rb#42
    def representation(metric, label_set, value, &block); end

    # @yield [metric("#{name}_sum", l, value["sum"])]
    #
    # source://prometheus-client//lib/prometheus/client/formats/text.rb#52
    def summary(name, set, value); end
  end
end

# source://prometheus-client//lib/prometheus/client/formats/text.rb#10
Prometheus::Client::Formats::Text::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#18
Prometheus::Client::Formats::Text::DELIMITER = T.let(T.unsafe(nil), String)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#14
Prometheus::Client::Formats::Text::HELP_LINE = T.let(T.unsafe(nil), String)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#16
Prometheus::Client::Formats::Text::LABEL = T.let(T.unsafe(nil), String)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#8
Prometheus::Client::Formats::Text::MEDIA_TYPE = T.let(T.unsafe(nil), String)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#12
Prometheus::Client::Formats::Text::METRIC_LINE = T.let(T.unsafe(nil), String)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#20
Prometheus::Client::Formats::Text::REGEX = T.let(T.unsafe(nil), Hash)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#21
Prometheus::Client::Formats::Text::REPLACE = T.let(T.unsafe(nil), Hash)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#17
Prometheus::Client::Formats::Text::SEPARATOR = T.let(T.unsafe(nil), String)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#13
Prometheus::Client::Formats::Text::TYPE_LINE = T.let(T.unsafe(nil), String)

# source://prometheus-client//lib/prometheus/client/formats/text.rb#9
Prometheus::Client::Formats::Text::VERSION = T.let(T.unsafe(nil), String)

# A Gauge is a metric that exposes merely an instantaneous value or some
# snapshot thereof.
#
# source://prometheus-client//lib/prometheus/client/gauge.rb#9
class Prometheus::Client::Gauge < ::Prometheus::Client::Metric
  # Decrements Gauge value by 1 or subtracts the given value from the Gauge.
  # (The value can be negative, resulting in a increase of the Gauge.)
  #
  # source://prometheus-client//lib/prometheus/client/gauge.rb#32
  def decrement(by: T.unsafe(nil), labels: T.unsafe(nil)); end

  # Increments Gauge value by 1 or adds the given value to the Gauge.
  # (The value can be negative, resulting in a decrease of the Gauge.)
  #
  # source://prometheus-client//lib/prometheus/client/gauge.rb#25
  def increment(by: T.unsafe(nil), labels: T.unsafe(nil)); end

  # Sets the value for the given label set
  #
  # source://prometheus-client//lib/prometheus/client/gauge.rb#15
  def set(value, labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/gauge.rb#10
  def type; end
end

# A histogram samples observations (usually things like request durations
# or response sizes) and counts them in configurable buckets. It also
# provides a total count and sum of all observed values.
#
# source://prometheus-client//lib/prometheus/client/histogram.rb#13
class Prometheus::Client::Histogram < ::Prometheus::Client::Metric
  # Offer a way to manually specify buckets
  #
  # @raise [ArgumentError]
  # @return [Histogram] a new instance of Histogram
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#20
  def initialize(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), buckets: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # Returns the value of attribute buckets.
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#17
  def buckets; end

  # Returns a hash with all the buckets plus +Inf (count) plus Sum for the given label set
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#88
  def get(labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/histogram.rb#117
  def init_label_set(labels); end

  # Records a given value. The recorded value is usually positive
  # or zero. A negative value is accepted but prevents current
  # versions of Prometheus from properly detecting counter resets
  # in the sum of observations. See
  # https://prometheus.io/docs/practices/histograms/#count-and-sum-of-observations
  # for details.
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#69
  def observe(value, labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/histogram.rb#59
  def type; end

  # Returns all label sets with their values expressed as hashes with their buckets
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#103
  def values; end

  # source://prometheus-client//lib/prometheus/client/histogram.rb#44
  def with_labels(labels); end

  private

  # Modifies the passed in parameter
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#130
  def accumulate_buckets(h); end

  # source://prometheus-client//lib/prometheus/client/histogram.rb#142
  def reserved_labels; end

  # @return [Boolean]
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#146
  def sorted?(bucket); end

  class << self
    # source://prometheus-client//lib/prometheus/client/histogram.rb#40
    def exponential_buckets(start:, count:, factor: T.unsafe(nil)); end

    # source://prometheus-client//lib/prometheus/client/histogram.rb#36
    def linear_buckets(start:, width:, count:); end
  end
end

# DEFAULT_BUCKETS are the default Histogram buckets. The default buckets
# are tailored to broadly measure the response time (in seconds) of a
# network service. (From DefBuckets client_golang)
#
# source://prometheus-client//lib/prometheus/client/histogram.rb#14
Prometheus::Client::Histogram::DEFAULT_BUCKETS = T.let(T.unsafe(nil), Array)

# LabelSetValidator ensures that all used label sets comply with the
# Prometheus specification.
#
# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#7
class Prometheus::Client::LabelSetValidator
  # @return [LabelSetValidator] a new instance of LabelSetValidator
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#19
  def initialize(expected_labels:, reserved_labels: T.unsafe(nil)); end

  # Returns the value of attribute expected_labels.
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#17
  def expected_labels; end

  # Returns the value of attribute reserved_labels.
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#17
  def reserved_labels; end

  # @raise [InvalidLabelSetError]
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#36
  def validate_labelset!(labelset); end

  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#24
  def validate_symbols!(labels); end

  private

  # @return [Boolean]
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#52
  def keys_match?(labelset); end

  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#62
  def validate_name(key); end

  # @raise [ReservedLabelError]
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#74
  def validate_reserved_key(key); end

  # @raise [InvalidLabelError]
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#56
  def validate_symbol(key); end
end

# TODO: we might allow setting :instance in the future
#
# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#9
Prometheus::Client::LabelSetValidator::BASE_RESERVED_LABELS = T.let(T.unsafe(nil), Array)

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#14
class Prometheus::Client::LabelSetValidator::InvalidLabelError < ::Prometheus::Client::LabelSetValidator::LabelSetError; end

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#13
class Prometheus::Client::LabelSetValidator::InvalidLabelSetError < ::Prometheus::Client::LabelSetValidator::LabelSetError; end

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#10
Prometheus::Client::LabelSetValidator::LABEL_NAME_REGEX = T.let(T.unsafe(nil), Regexp)

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#12
class Prometheus::Client::LabelSetValidator::LabelSetError < ::StandardError; end

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#15
class Prometheus::Client::LabelSetValidator::ReservedLabelError < ::Prometheus::Client::LabelSetValidator::LabelSetError; end

# Metric
#
# source://prometheus-client//lib/prometheus/client/metric.rb#9
class Prometheus::Client::Metric
  # @return [Metric] a new instance of Metric
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#12
  def initialize(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # Returns the value of attribute docstring.
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#10
  def docstring; end

  # Returns the value for the given label set
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#55
  def get(labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/metric.rb#74
  def init_label_set(labels); end

  # Returns the value of attribute labels.
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#10
  def labels; end

  # Returns the value of attribute name.
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#10
  def name; end

  # Returns the value of attribute preset_labels.
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#10
  def preset_labels; end

  # Returns all label sets with their values
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#79
  def values; end

  # source://prometheus-client//lib/prometheus/client/metric.rb#60
  def with_labels(labels); end

  protected

  # source://prometheus-client//lib/prometheus/client/metric.rb#49
  def replace_internal_store(new_store); end

  private

  # source://prometheus-client//lib/prometheus/client/metric.rb#105
  def label_set_for(labels); end

  # source://prometheus-client//lib/prometheus/client/metric.rb#85
  def reserved_labels; end

  # source://prometheus-client//lib/prometheus/client/metric.rb#112
  def stringify_values(labels); end

  # @raise [ArgumentError]
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#99
  def validate_docstring(docstring); end

  # source://prometheus-client//lib/prometheus/client/metric.rb#89
  def validate_name(name); end
end

# Registry
#
# source://prometheus-client//lib/prometheus/client/registry.rb#13
class Prometheus::Client::Registry
  # @return [Registry] a new instance of Registry
  #
  # source://prometheus-client//lib/prometheus/client/registry.rb#16
  def initialize; end

  # source://prometheus-client//lib/prometheus/client/registry.rb#40
  def counter(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://prometheus-client//lib/prometheus/client/registry.rb#75
  def exist?(name); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#56
  def gauge(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#79
  def get(name); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#64
  def histogram(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), buckets: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#83
  def metrics; end

  # source://prometheus-client//lib/prometheus/client/registry.rb#21
  def register(metric); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#48
  def summary(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#34
  def unregister(name); end
end

# source://prometheus-client//lib/prometheus/client/registry.rb#14
class Prometheus::Client::Registry::AlreadyRegisteredError < ::StandardError; end

# Summary is an accumulator for samples. It captures Numeric data and
# provides the total count and sum of observations.
#
# source://prometheus-client//lib/prometheus/client/summary.rb#9
class Prometheus::Client::Summary < ::Prometheus::Client::Metric
  # Returns a hash with "sum" and "count" as keys
  #
  # source://prometheus-client//lib/prometheus/client/summary.rb#30
  def get(labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/summary.rb#53
  def init_label_set(labels); end

  # Records a given value. The recorded value is usually positive
  # or zero. A negative value is accepted but prevents current
  # versions of Prometheus from properly detecting counter resets
  # in the sum of observations. See
  # https://prometheus.io/docs/practices/histograms/#count-and-sum-of-observations
  # for details.
  #
  # source://prometheus-client//lib/prometheus/client/summary.rb#20
  def observe(value, labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/summary.rb#10
  def type; end

  # Returns all label sets with their values expressed as hashes with their sum/count
  #
  # source://prometheus-client//lib/prometheus/client/summary.rb#43
  def values; end

  private

  # source://prometheus-client//lib/prometheus/client/summary.rb#64
  def reserved_labels; end
end

# source://prometheus-client//lib/prometheus/middleware/collector.rb#7
module Prometheus::Middleware; end

# Collector is a Rack middleware that provides a sample implementation of a
# HTTP tracer.
#
# By default metrics are registered on the global registry. Set the
# `:registry` option to use a custom registry.
#
# By default metrics all have the prefix "http_server". Set
# `:metrics_prefix` to something else if you like.
#
# The request counter metric is broken down by code, method and path.
# The request duration metric is broken down by method and path.
#
# source://prometheus-client//lib/prometheus/middleware/collector.rb#19
class Prometheus::Middleware::Collector
  # @return [Collector] a new instance of Collector
  #
  # source://prometheus-client//lib/prometheus/middleware/collector.rb#22
  def initialize(app, options = T.unsafe(nil)); end

  # Returns the value of attribute app.
  #
  # source://prometheus-client//lib/prometheus/middleware/collector.rb#20
  def app; end

  # source://prometheus-client//lib/prometheus/middleware/collector.rb#31
  def call(env); end

  # Returns the value of attribute registry.
  #
  # source://prometheus-client//lib/prometheus/middleware/collector.rb#20
  def registry; end

  protected

  # source://prometheus-client//lib/prometheus/middleware/collector.rb#90
  def generate_path(env); end

  # source://prometheus-client//lib/prometheus/middleware/collector.rb#51
  def init_exception_metrics; end

  # source://prometheus-client//lib/prometheus/middleware/collector.rb#37
  def init_request_metrics; end

  # source://prometheus-client//lib/prometheus/middleware/collector.rb#69
  def record(env, code, duration); end

  # source://prometheus-client//lib/prometheus/middleware/collector.rb#96
  def strip_ids_from_path(path); end

  # source://prometheus-client//lib/prometheus/middleware/collector.rb#59
  def trace(env); end
end

# Exporter is a Rack middleware that provides a sample implementation of a
# Prometheus HTTP exposition endpoint.
#
# By default it will export the state of the global registry and expose it
# under `/metrics`. Use the `:registry` and `:path` options to change the
# defaults.
#
# source://prometheus-client//lib/prometheus/middleware/exporter.rb#14
class Prometheus::Middleware::Exporter
  # @return [Exporter] a new instance of Exporter
  #
  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#20
  def initialize(app, options = T.unsafe(nil)); end

  # Returns the value of attribute app.
  #
  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#15
  def app; end

  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#28
  def call(env); end

  # Returns the value of attribute path.
  #
  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#15
  def path; end

  # Returns the value of attribute registry.
  #
  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#15
  def registry; end

  private

  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#84
  def build_dictionary(formats, fallback); end

  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#56
  def extract_quality(attributes, default = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#91
  def metrics_port?(request_port); end

  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#39
  def negotiate(env, formats); end

  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#74
  def not_acceptable(formats); end

  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#47
  def parse(header); end

  # source://prometheus-client//lib/prometheus/middleware/exporter.rb#66
  def respond_with(format); end
end

# source://prometheus-client//lib/prometheus/middleware/exporter.rb#18
Prometheus::Middleware::Exporter::FALLBACK = Prometheus::Client::Formats::Text

# source://prometheus-client//lib/prometheus/middleware/exporter.rb#17
Prometheus::Middleware::Exporter::FORMATS = T.let(T.unsafe(nil), Array)
