# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `falcon` gem.
# Please instead update this file by running `bin/tapioca gem falcon`.

# source://falcon-0.42.2/lib/falcon/middleware/verbose.rb:26
module Falcon; end

# source://falcon-0.42.2/lib/falcon/controller/serve.rb:31
module Falcon::Controller; end

# A generic controller for serving an application.
# Uses {Server} for handling incoming requests.
#
# source://falcon-0.42.2/lib/falcon/controller/serve.rb:36
class Falcon::Controller::Serve < ::Async::Container::Controller
  # Initialize the server controller.
  #
  # @return [Serve] a new instance of Serve
  #
  # source://falcon-0.42.2/lib/falcon/controller/serve.rb:37
  def initialize(command, **options); end

  # Create the controller as specified by the command.
  # e.g. `Async::Container::Forked`.
  #
  # source://falcon-0.42.2/lib/falcon/controller/serve.rb:49
  def create_container; end

  # The endpoint the server will bind to.
  #
  # source://falcon-0.42.2/lib/falcon/controller/serve.rb:54
  def endpoint; end

  # source://falcon-0.42.2/lib/falcon/controller/serve.rb:59
  def load_app; end

  # The name of the controller which is used for the process title.
  #
  # source://falcon-0.42.2/lib/falcon/controller/serve.rb:79
  def name; end

  # Setup the container with the application instance.
  #
  # source://falcon-0.42.2/lib/falcon/controller/serve.rb:85
  def setup(container); end

  # Prepare the bound endpoint for the server.
  #
  # source://falcon-0.42.2/lib/falcon/controller/serve.rb:64
  def start; end

  # Close the bound endpoint.
  #
  # source://falcon-0.42.2/lib/falcon/controller/serve.rb:117
  def stop(*_arg0); end
end

# An HTTP-specific endpoint which adds localhost TLS.
#
# source://falcon-0.42.2/lib/falcon/endpoint.rb:30
class Falcon::Endpoint < ::Async::HTTP::Endpoint
  # Build an appropriate SSL context for the given hostname.
  #
  # Uses {Localhost::Authority} to generate self-signed certficates.
  #
  # source://falcon-0.42.2/lib/falcon/endpoint.rb:40
  def build_ssl_context(hostname = T.unsafe(nil)); end

  # The SSL context to use, which invokes {build_ssl_context} if not otherwise specified.
  #
  # source://falcon-0.42.2/lib/falcon/endpoint.rb:31
  def ssl_context; end
end

# source://falcon-0.42.2/lib/falcon/middleware/verbose.rb:27
module Falcon::Middleware; end

# A HTTP middleware for logging requests and responses.
#
# source://falcon-0.42.2/lib/falcon/middleware/verbose.rb:32
class Falcon::Middleware::Verbose < ::Protocol::HTTP::Middleware
  # Initialize the verbose middleware.
  #
  # @return [Verbose] a new instance of Verbose
  #
  # source://falcon-0.42.2/lib/falcon/middleware/verbose.rb:33
  def initialize(app, logger = T.unsafe(nil)); end

  # Log details of the incoming request.
  #
  # source://falcon-0.42.2/lib/falcon/middleware/verbose.rb:40
  def annotate(request); end

  # Log details of the incoming request using {annotate} and wrap the response to log response details too.
  #
  # source://falcon-0.42.2/lib/falcon/middleware/verbose.rb:50
  def call(request); end
end

# A server listening on a specific endpoint, hosting a specific middleware.
#
# source://falcon-0.42.2/lib/falcon/server.rb:39
class Falcon::Server < ::Async::HTTP::Server
  class << self
    # Wrap a rack application into a middleware suitable the server.
    #
    # source://falcon-0.42.2/lib/falcon/server.rb:40
    def middleware(rack_app, verbose: T.unsafe(nil), cache: T.unsafe(nil)); end
  end
end
