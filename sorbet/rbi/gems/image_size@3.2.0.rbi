# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `image_size` gem.
# Please instead update this file by running `bin/tapioca gem image_size`.

# Determine image format and size
#
# source://image_size//lib/image_size/reader.rb#6
class ImageSize
  # Given image as any class responding to read and eof? or data as String, finds its format and dimensions
  #
  # @return [ImageSize] a new instance of ImageSize
  #
  # source://image_size//lib/image_size.rb#49
  def initialize(data); end

  # Image format
  #
  # source://image_size//lib/image_size.rb#57
  def format; end

  # Image height
  #
  # source://image_size//lib/image_size.rb#64
  def h; end

  # Image height
  #
  # source://image_size//lib/image_size.rb#64
  def height; end

  # get image width and height as an array which to_s method returns "#{width}x#{height}"
  #
  # source://image_size//lib/image_size.rb#68
  def size; end

  # Image width
  #
  # source://image_size//lib/image_size.rb#60
  def w; end

  # Image width
  #
  # source://image_size//lib/image_size.rb#60
  def width; end

  private

  # source://image_size//lib/image_size.rb#76
  def detect_format(ir); end

  # source://image_size//lib/image_size.rb#124
  def detect_jpeg2000_type(ir); end

  # source://image_size//lib/image_size.rb#102
  def detect_png_type(ir); end

  # source://image_size//lib/image_size.rb#115
  def detect_pnm_type(ir); end

  # source://image_size//lib/image_size.rb#147
  def size_of_apng(ir); end

  # source://image_size//lib/image_size.rb#181
  def size_of_bmp(ir); end

  # source://image_size//lib/image_size.rb#321
  def size_of_cur(ir); end

  # source://image_size//lib/image_size.rb#382
  def size_of_emf(ir); end

  # source://image_size//lib/image_size.rb#135
  def size_of_gif(ir); end

  # source://image_size//lib/image_size.rb#321
  def size_of_ico(ir); end

  # source://image_size//lib/image_size.rb#375
  def size_of_j2c(ir); end

  # source://image_size//lib/image_size.rb#339
  def size_of_jp2(ir); end

  # source://image_size//lib/image_size.rb#162
  def size_of_jpeg(ir); end

  # source://image_size//lib/image_size.rb#339
  def size_of_jpx(ir); end

  # source://image_size//lib/image_size.rb#139
  def size_of_mng(ir); end

  # source://image_size//lib/image_size.rb#205
  def size_of_pam(ir); end

  # source://image_size//lib/image_size.rb#196
  def size_of_pbm(ir); end

  # source://image_size//lib/image_size.rb#284
  def size_of_pcx(ir); end

  # source://image_size//lib/image_size.rb#196
  def size_of_pgm(ir); end

  # source://image_size//lib/image_size.rb#147
  def size_of_png(ir); end

  # source://image_size//lib/image_size.rb#196
  def size_of_ppm(ir); end

  # source://image_size//lib/image_size.rb#249
  def size_of_psd(ir); end

  # source://image_size//lib/image_size.rb#298
  def size_of_svg(ir); end

  # source://image_size//lib/image_size.rb#289
  def size_of_swf(ir); end

  # source://image_size//lib/image_size.rb#253
  def size_of_tiff(ir); end

  # source://image_size//lib/image_size.rb#326
  def size_of_webp(ir); end

  # source://image_size//lib/image_size.rb#232
  def size_of_xbm(ir); end

  # source://image_size//lib/image_size.rb#237
  def size_of_xpm(ir); end

  class << self
    # Used for svg
    #
    # source://image_size//lib/image_size.rb#39
    def dpi; end

    # Used for svg
    #
    # source://image_size//lib/image_size.rb#44
    def dpi=(dpi); end

    # Given path to image finds its format, width and height
    #
    # source://image_size//lib/image_size.rb#34
    def path(path); end
  end
end

# source://image_size//lib/image_size/chunky_reader.rb#6
module ImageSize::ChunkyReader
  include ::ImageSize::Reader

  # Including class should define method chunk that accepts the chunk number
  # and returns a string of chunk_size length or shorter for last chunk, or
  # nil for further chunks.
  # Determines required chunks, takes parts of them to construct desired
  # substring, behaves same as str[start, length] except start can't be
  # negative.
  #
  # @raise [ArgumentError]
  #
  # source://image_size//lib/image_size/chunky_reader.rb#20
  def [](offset, length); end

  # Size of a chunk in which to read
  #
  # source://image_size//lib/image_size/chunky_reader.rb#10
  def chunk_size; end
end

# source://image_size//lib/image_size.rb#380
ImageSize::EMF_SMAX = T.let(T.unsafe(nil), Integer)

# source://image_size//lib/image_size.rb#379
ImageSize::EMF_UMAX = T.let(T.unsafe(nil), Integer)

# source://image_size//lib/image_size.rb#11
class ImageSize::FormatError < ::StandardError; end

# source://image_size//lib/image_size.rb#156
ImageSize::JPEG_CODE_CHECK = T.let(T.unsafe(nil), Array)

# source://image_size//lib/image_size/reader.rb#7
module ImageSize::Reader
  # source://image_size//lib/image_size/reader.rb#40
  def fetch(offset, length); end

  # source://image_size//lib/image_size/reader.rb#50
  def unpack(offset, length, format); end

  # source://image_size//lib/image_size/reader.rb#55
  def unpack1(offset, length, format); end

  class << self
    # source://image_size//lib/image_size/reader.rb#9
    def open(input); end

    private

    # source://image_size//lib/image_size/reader.rb#26
    def for_io(io); end
  end
end

# source://image_size//lib/image_size.rb#74
ImageSize::SVG_R = T.let(T.unsafe(nil), Regexp)

# source://image_size//lib/image_size/seekable_io_reader.rb#6
class ImageSize::SeekableIOReader
  include ::ImageSize::Reader
  include ::ImageSize::ChunkyReader

  # @return [SeekableIOReader] a new instance of SeekableIOReader
  #
  # source://image_size//lib/image_size/seekable_io_reader.rb#9
  def initialize(io); end

  private

  # source://image_size//lib/image_size/seekable_io_reader.rb#17
  def chunk(i); end
end

# Array joining with 'x'
#
# source://image_size//lib/image_size.rb#14
class ImageSize::Size < ::Array
  # get second element
  #
  # source://image_size//lib/image_size.rb#27
  def h; end

  # get second element
  #
  # source://image_size//lib/image_size.rb#27
  def height; end

  # join using 'x'
  #
  # source://image_size//lib/image_size.rb#16
  def to_s; end

  # get first element
  #
  # source://image_size//lib/image_size.rb#21
  def w; end

  # get first element
  #
  # source://image_size//lib/image_size.rb#21
  def width; end
end

# source://image_size//lib/image_size/stream_io_reader.rb#6
class ImageSize::StreamIOReader
  include ::ImageSize::Reader
  include ::ImageSize::ChunkyReader

  # @return [StreamIOReader] a new instance of StreamIOReader
  #
  # source://image_size//lib/image_size/stream_io_reader.rb#9
  def initialize(io); end

  private

  # source://image_size//lib/image_size/stream_io_reader.rb#16
  def chunk(i); end
end

# source://image_size//lib/image_size/string_reader.rb#6
class ImageSize::StringReader
  include ::ImageSize::Reader

  # @return [StringReader] a new instance of StringReader
  #
  # source://image_size//lib/image_size/string_reader.rb#9
  def initialize(string); end

  # source://image_size//lib/image_size/string_reader.rb#17
  def [](offset, length); end
end

# source://image_size//lib/image_size.rb#75
ImageSize::XML_R = T.let(T.unsafe(nil), Regexp)
